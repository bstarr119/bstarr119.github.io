import { Vector3, Vector4 } from 'three';
import { CloudLayer, CloudLayerLike } from './CloudLayer';
import { DensityProfileLike } from './DensityProfile';
type NumericKey = keyof {
    [P in keyof CloudLayer as number extends CloudLayer[P] ? P : never]: any;
};
export declare class CloudLayers extends Array<CloudLayer> {
    static readonly DEFAULT: CloudLayers;
    constructor(options?: readonly CloudLayerLike[]);
    set(options?: readonly CloudLayerLike[]): this;
    reset(): this;
    clone(): CloudLayers;
    copy(other: CloudLayers): this;
    get localWeatherChannels(): string;
    packValues<K extends NumericKey>(key: K, result: Vector4): Vector4;
    packSums<A extends NumericKey, B extends NumericKey>(a: A, b: B, result: Vector4): Vector4;
    packDensityProfiles<K extends keyof DensityProfileLike>(key: K, result: Vector4): Vector4;
    packIntervalHeights(minIntervals: Vector3, maxIntervals: Vector3): void;
}
export {};
