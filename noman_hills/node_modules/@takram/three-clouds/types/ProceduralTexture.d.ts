import { Texture, WebGLRenderer } from 'three';
export interface ProceduralTexture<T extends Texture = Texture> {
    readonly size: number;
    readonly texture: T;
    dispose: () => void;
    render: (renderer: WebGLRenderer, deltaTime?: number) => void;
}
export interface ProceduralTextureBaseParameters {
    size: number;
    fragmentShader: string;
}
export declare class ProceduralTextureBase implements ProceduralTexture {
    readonly size: number;
    needsRender: boolean;
    private readonly material;
    private readonly mesh;
    private readonly renderTarget;
    private readonly camera;
    constructor({ size, fragmentShader }: ProceduralTextureBaseParameters);
    dispose(): void;
    render(renderer: WebGLRenderer, deltaTime?: number): void;
    get texture(): Texture;
}
