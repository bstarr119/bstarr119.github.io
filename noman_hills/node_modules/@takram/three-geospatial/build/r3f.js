import { jsx as a, jsxs as f } from "react/jsx-runtime";
import { forwardRef as m, useMemo as u, useEffect as l, useRef as E } from "react";
import { Group as h, Vector3 as d, Matrix4 as x } from "three";
import { E as p, G, a as w } from "./shared.js";
import { extend as F } from "@react-three/fiber";
const S = /* @__PURE__ */ new x(), N = /* @__PURE__ */ new G(), U = /* @__PURE__ */ new d();
class j extends h {
  set(o, t, r, e = p.WGS84) {
    const s = N.set(o, t, r).toECEF(U);
    e.getEastNorthUpFrame(s, S).decompose(this.position, this.quaternion, this.scale);
  }
}
const g = /* @__PURE__ */ m(function({ longitude: o, latitude: t, height: r = 0, ellipsoid: e = p.WGS84, children: s }, n) {
  const c = u(() => new j(), []);
  return l(() => {
    c.set(o, t, r, e);
  }, [o, t, r, e, c]), /* @__PURE__ */ a("primitive", { ref: n, object: c, children: s });
});
function y(i) {
  return (o) => {
    i.forEach((t) => {
      typeof t == "function" ? t(o) : t != null && (t.current = o);
    });
  };
}
const q = /* @__PURE__ */ m(
  function({ args: o, children: t, ...r }, e) {
    const s = E(null);
    return F({ EllipsoidGeometry: w }), /* @__PURE__ */ f("mesh", { ref: y([s, e]), ...r, children: [
      /* @__PURE__ */ a("ellipsoidGeometry", { args: o }),
      t
    ] });
  }
);
export {
  g as EastNorthUpFrame,
  q as EllipsoidMesh
};
//# sourceMappingURL=r3f.js.map
