import { Data3DTexture, DataTexture, Loader } from 'three';
import { Class, WritableKeysOf } from 'type-fest';
import { TypedArray } from './typedArray';
import { TypedArrayLoader } from './TypedArrayLoader';
import { TypedArrayParser } from './typedArrayParsers';
import { Callable } from './types';
type ParameterProperties<T> = {
    [K in WritableKeysOf<T> as T[K] extends Callable ? never : K]: T[K];
};
export interface DataTextureParameters extends Omit<Partial<ParameterProperties<DataTexture>>, 'image'> {
    width?: number;
    height?: number;
}
export interface Data3DTextureParameters extends Omit<Partial<ParameterProperties<Data3DTexture>>, 'image'> {
    width?: number;
    height?: number;
    depth?: number;
}
export declare abstract class DataLoader<T extends DataTexture | Data3DTexture = DataTexture | Data3DTexture, U extends TypedArray = TypedArray> extends Loader<T> {
    abstract readonly Texture: Class<T>;
    abstract readonly TypedArrayLoader: Class<TypedArrayLoader<U>>;
    readonly parameters: DataTextureParameters & Data3DTextureParameters;
    load(url: string, onLoad: (data: T) => void, onProgress?: (event: ProgressEvent) => void, onError?: (error: unknown) => void): void;
}
export declare function createData3DTextureLoaderClass<T extends TypedArray>(parser: TypedArrayParser<T>, parameters?: Data3DTextureParameters): Class<DataLoader<Data3DTexture, T>>;
export declare function createDataTextureLoaderClass<T extends TypedArray>(parser: TypedArrayParser<T>, parameters?: DataTextureParameters): Class<DataLoader<DataTexture, T>>;
export declare function createData3DTextureLoader<T extends TypedArray>(parser: TypedArrayParser<T>, parameters?: Data3DTextureParameters): DataLoader<Data3DTexture, T>;
export declare function createDataTextureLoader<T extends TypedArray>(parser: TypedArrayParser<T>, parameters?: DataTextureParameters): DataLoader<DataTexture, T>;
export {};
